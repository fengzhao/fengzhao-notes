## Mutli-Stage Builds



在应用了容器技术的软件开发过程中，控制容器镜像的大小可是一件费时费力的事情。

如果我们构建的镜像既是编译软件的环境，又是软件最终的运行环境，这是很难控制镜像大小的。

所以常见的配置模式为：**分别为软件的编译环境和运行环境提供不同的容器镜像**

比如为编译环境提供一个 Dockerfile.build，用它构建的镜像包含了编译软件需要的所有内容，比如代码、SDK、工具等等

为软件的运行环境提供另外一个单独的 Dockerfile，它从 Dockerfile.build 中获得编译好的软件，用它构建的镜像只包含运行软件所必须的内容。

这种情况被称为**构造者模式(builder pattern)**。

Docker17.05 引入了多阶段构建（Multi-stage builds ），众所周知，Docker镜像分层，