



 MySQL复制中使用的事务类型有以下两种：

- GTID事务：在二进制日志中每个GTID事务始终都以Gtid_log_event开头。可以使用GTID或使用文件名和位置来定位GTID事务。
- 匿名事务：MySQL 8 的二进制日志中的每个匿名事务都以Anonymous_gtid_log_event开头，不分配GTID。匿名事务只能使用文件名和位置来定位。



GTID出现之前，在一主多从的复制拓扑中，如果主库宕机，需要从多个从库选择之一作为新主库，这个过程比较复杂。

没有一种直接了当的方法找到其它从库对应的新主库二进制日志坐标。

通常的做法是先要寻找每个从库复制原主库的最后语句，然后找到新主库中包含该语句的二进制日志文件，其中该语句后的第一个事件位置即为连接新主库的二进制坐标。

主要难点在于不存在一个唯一标识指出“复制原主库的最后语句”，于是后来的MySQL中就出现了GTID的概念。



## Server UUID

MySQL数据目录中通常存在一个名为auto.cnf文件，存储了server-uuid的值，如下所示：

```shell
[auto]                                                                                                                                                       
server-uuid=f4a515bc-7956-11e9-ba16-0894ef77d734

# show变量也可以看见这个值
show VARIABLES like '%server_uuid%'


```

MySQL 启动时，会自动从data_dir/auto.cnf 文件中获取 server-uuid 值，并将这个值存储在全局变量 server_uuid 中。如果这个值或者这个文件不存在，那么将会生成一个新的uuid值，并将这个值保存在auto.cnf文件中。

**server-uuid 与 server-id 一样，用于标识 MySQ L实例在集群中的唯一性，这两个参数在主从复制中具有重要作用。默认情况下，如果主、从库的server-uuid或者server-id的值一样，将会导致主从复制报错中断。**







## GTID





全局事务标识符GTID的全称为Global Transaction Identifier，是在**整个全局复制环境中对一个事务的唯一标识**。

它是MySQL 5.6加入的一个强大特性，目的在于能够实现主从自动定位和切换，而不像以前需要指定文件和位置。

使用GTID时，主库上提交事务创建事务的GTID，从库在应用中继日志时用GTID识别和跟踪每个事务。在启动新从库或因故障转移到新主库时可以使用GTID来标识复制的位置，极大地简化了这些任务。

由于GTID的复制完全基于事务，因此只要在主库上提交的所有事务也在从库上提交，两者之间的一致性就得到保证。

GTID支持基于语句或基于行的复制格式，但为了获得最佳效果，MySQL建议使用基于行的格式。

GTID始终保留在主库和从库上，这意味着可以通过检查其二进制日志来确定应用于任何从库的任何事务的来源。而且，一旦在给定库上提交了具有给定GTID的事务，则该库将忽略具有相同GTID的任何后续事务。

因此，在主库上提交的事务只会在从库上应用一次，这也有助于保证一致性。





### GTID的格式

在 MySQL 5.6 中，每一个 GTID 代表一个已提交的数据库事务的编号，并且是一个全局唯一的编号。GTID 的格式如下，下面是一个GTID的具体形式：

```shell
GTID = source_id:transaction_id
3E11FA47-71CA-11E1-9E33-C80AA9429562:23
```



在上面的定义中，**前面一段为source_id：表示执行事务的主库 uuid（server_uuid），transaction_id 是一个从 1 开始的自增计数，表示在这个主库上执行的第 n 个事务。**

**MySQL 会保证事务与 GTID 之间的 1 : 1 映射，这个例子表示：在以 3E11FA47-71CA-11E1-9E33-C80AA9429562 为唯一标示的 MySQL 实例上执行的第 23 个数据库事务。**

很容易理解，MySQL 只要保证每台数据库的 server_uuid 全局唯一，以及每台数据库生成的 transaction_id 自身唯一，就能保证 GTID 的全局唯一性。



一组连续的事务可以用 '-' 连接的事务序号范围表示。例如

```
e6954592-8dba-11e6-af0e-fa163e1cf111:1-5
```















