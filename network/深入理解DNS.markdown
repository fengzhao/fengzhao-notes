# DNS原理



DNS（Domain Name System):域名系统，是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。

DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。

它的作用是根据域名查出 IP 地址，它是HTTP协议的前提，只有将域名正确的解析成 IP 地址后，后面的 HTTP 流程才能进行，所以一般做网络优化会首选优化 DNS。







# 域名基本概念



[域名 ](https://baike.baidu.com/item/域名/86062)由两组或两组以上的 [ASCII](https://baike.baidu.com/item/ASCII)或各国语言字符构成，各组字符间由点号分隔开，最右边的字符组称为顶级域名或 [一级域名](https://baike.baidu.com/item/一级域名/4605645)、倒数第二组称为[二级域名](https://baike.baidu.com/item/二级域名/4778701)、倒数第三组称为[三级域名](https://baike.baidu.com/item/三级域名/10710875)、以此类推。

比如 www.zhihu.com  

- .com 是顶级域名 

- zhihu 是二级域名

- www  是三级域名



顶级域名清单 https://www.iana.org/domains/root/db





顶级域名分为如下几类：

- 一是国家和地区顶级域名（country code top-level domains，简称ccTLDs）。例如中国是 .cn，日本是 .jp

  - 两个字母的顶级域名（例如 .uk、.de 和 .jp）称为国家和地区代码顶级域名 (ccTLD)，对应于国家、地区或其他地理位置。

  - 有关国家和地区代码顶级域名 (ccTLD) 注册的规则和政策差异很大，而且很多国家和地区代码顶级域名 (ccTLD) 仅供相应国家/地区的公民使用。

- 二是通用顶级域名（generic top-level domains，简称gTLDs），例如表示工商企业的.com，表示网络提供商的 .net，表示非盈利组织的 .org等。

- 三是新顶级域名（New gTLD）如通用的.xyz、代表“高端”的.top、代表“红色”的.red、代表“人”的.ren等一千多种。



所有的顶级域名是由 **互联网名称与数字地址分配机构(icann)**  来管理和分配的。这个机构大概做以下几件事：

1.负责认可域名注册商。"认可"是指：第一，确立和制定履行注册职能的最低标准；第二，对符合这些标准的个人或实体予以认可；第三，签订认可协议，该协议中规定提供注册商服务所适用的规则和程序。

   简单说，就是这个机构并不直接对接购买域名的用户。这个机构把顶级域名授权带域名注册商，然后用户可以在域名商处注册自己想要的二级域名。

   普通用户和公司都不会自己做顶级域名，一般都是注册二级域名。举个例子，我们可以在多个域名注册商处注册类似 xxx01.com  xxx02.com 这样的二级域名。这是因为这些注册商向icann申请了域名注册资格。



域名注册商清单 https://www.icann.org/en/accredited-registrars 

我们国内常见的阿里云，腾讯云的dnspod，国外的google domain都是域名注册商，都额可以在这份清单中查到。



通过在 icann 的网站上，我们可以查到一个顶级域的管理机构。

- 比如我们的国家cn顶级域 ： https://www.iana.org/domains/root/db/cn.html 

- 比如google注册的dev顶级域 https://www.iana.org/domains/root/db/dev.html



中国的互联网域名管理办法

- http://www.gov.cn/gongbao/content/2017/content_5241917.htm



互联网名称与数字地址分配机构（ICANN）作为全球互联网IP地址和域名资源的分配和管理机构，是国际多利益攸关方共同参与互联网域名系统根区管理、互联网协议（IP）地址空间分配、协议标识符指派及与域名和IP地址管理相关政策制定的核心平台。

欧盟的《通用数据保护条例》（GDPR）于2018年5月正式实施。GDPR自出台以来在世界范围掀起了个人数据保护的浪潮，并成为全球个人信息保护的事实标杆。

GDPR明确提出，欧盟公民拥有对自身数据的知情权、访问权、更正权、被遗忘权、限制处理权、反对权等数据权利；

同时，沿袭欧盟1995年颁布的《个人数据保护指令》中关于“处理者”和“控制者”的区分，强调在处理个人数据时，例如涉及欧盟公民或数据处理相关方在欧盟境内设有实体，均须遵守GDPR有关个人数据保护的要求。

GDPR关于保护欧盟公民个人数据权利的要求与ICANN过去长期实施的全球域名政策存在冲突，涉及的主要环节包括域名注册、域名转移、后台托管、数据托管、数据报送、注册数据查询服务等。

根据GDPR要求，各相关主体在开展上述环节活动时，如涉及对欧盟地区域名注册人（自然人，含管理/技术联系人）隐私数据的收集、存储、转移、公布等，应明确获得其同意。

GDPR虽为欧盟区域性法规，但是，其中有关“域外治权”的条款不仅对欧盟区域内域名行业从业机构具备效力，也对欧盟区域外的从业机构具有广泛影响，因此，迫使ICANN对其国际域名政策进行调整。





# DNS分层



## 权威DNS

权威DNS：负责对请求作出权威的回答。权威DNS中存储着记录，最常见的3种：A记录（记录某域名和其IP的对应），NS记录（记录某域名和负责解析该域的权威DNS），CNAME记录（负责记录某域名及其别名）。

权威能直接回答的，就回A记录；需要其他权威 DNS 回答的，就回NS记录，然后 LDNS 再去找其他权威 DNS 问；如果该记录是别名类型的，就回 CNAME，LDNS 就会再去解析别名。

递归DNS：通常就是LDNS，它接受终端的域名查询请求，负责在网上问一圈后，将答案返回终端。





## 根DNS

https://segmentfault.com/a/1190000023696737

### **为什么根DNS只有13台？**

DNS主要使用UDP数据报传送报文，不含前面的各种头部，DNS报文要求被控制在512字节之内（ RFC1035 ）。

主要考虑是这个大小几乎可以在互联网上畅通无阻，不会因为路径中某个MTU太小（ MTU 通常总会 >= 576，见 RFC791 ）而导致 IP 分片，从而预防了各种不可预期的后果。

而每一个根DNS在DNS报文中都要占用一定的字节数，比如根的名称、TTL、IP地址等。

这样，13个根域名服务器基本上就把空间占差不多了，剩余的字节还要用于包装DNS报头以及其它协议参数，所以根域名服务器不易太多，13个算是比较合适的数目。



## 真的只有13台服务器吗？



和很多人想象的完全不一样，这13个根域名服务器，并不是只有13台物理的服务器。

这13个根，只是一个逻辑上的概念，每个根DNS，背后都有多台真正的物理服务器在工作！

截至2020年8月12日，全球一共有1097个根服务器。每一个根都有若干个镜像，分布在全球不同的地方。



截至2020年8月12日，全球一共有1097个根服务器。每一个根都有若干个镜像，分布在全球不同的地方。

这个数目在不断上涨，19年10月1日新中国成立 70 周年阅兵的时候，是1015个服务器。

13个根 DNS 由12个独立的机构管理，比如 A 根和 J 根都是由 Verisign 公司管理，截至2020年8月12日，A根在全球各地有 53 个站点，J 根有 185 个站点。L 根由 ICANN 管理，全球有 167 个站点，其中北京2个，上海1个。

在root-servers网站上，可以查到所有这些根服务器的分布，从网站展示的根镜像服务器地图上看（2020年8月12日）：

北京有 5 个根镜像服务器，上海 1 个，杭州 2 个，武汉1个、郑州1个、西宁1个、贵阳1个、广州1个、香港 9 个，台北 6 个。

包含港澳台部分，我国一共有28个根镜像。



我国境内发出的对根DNS的请求，其实都由镜像完成了。



# DNS解析过程



### 递归解析/递归查询



这种是最常见，**也是默认的DNS解析方式**。

在这种解析方式中，客户端配置了本地DNS服务器，**（又称Local DNS， 可以是默认的运营商提供的Local DNS 或者自己设置的其他公共DNS）** 。

**如果不能解析的话，则后面的查询全由 LocalDNS 代替客户端进行查询**，直到 LocalDNS从 权威 DNS 得到了正确的解析结果。

然后由LocalDNS告诉本地客户端查询的结果。



在这个查询过程中，一直是以 Local DNS 为中心的，本地客户端只是发出原始的域名查询请求报文，然后就一直处于等待状态的，直到LocalDNS发来了最终的查询结果。此时的LocalDNS就相当于中介代理的作用。

如果考虑了 Local DNS 的缓存技术（也就是在  Local DNS 上对一定数量的以前查询记录保存一定时间，这样后面查询同样的域名信息时就可直接从缓存中调出来，以加速查询效率）的话。



（1）客户端向本机配置的  Local DNS （在此仅以首选DNS服务器为例进行介绍，所配置其它备用DNS服务器的解析流程完全一样）发出DNS域名查询请求。

​		 比如：我的PC配置了用dnspod的公共DNS，然后请求 www.feishu.com 

（2）  Local DNS  收到请求后，先查询本地的缓存，如果有该域名的记录项，则   Local DNS  就直接把查询的结果返回给客户端；如果本地缓存中没有该域名的记录，则   Local DNS  再以DNS客户端的角色发送与前面一样的DNS域名查询请求发给**根DNS**。

​		比如：dnspod先去自己的dns系统里查找这个域名，如果找不到记录。就把这个dns请求报文发给根。

（3）根DNS收到DNS请求后，把所查询得到的所请求的DNS域名中**顶级域名所对应的顶级名称服务器**地址返回给  Local DNS  。

​		比如：根收到请求后，把负责解析 com 域名解析的**顶级域DNS**的IP地址返给 dnspod。

（4）  Local DNS 根据根名称服务器所返回的顶级名称服务器地址，向对应的顶级名称服务器发送与前面一样的DNS域名查询请求。

​		比如：dnspod再去向**顶级域DNS**发起DNS查询请求。

（5）对应的顶级名称服务器在收到DNS查询请求后，也是先查询自己的缓存，如果有所请求的DNS域名的记录项，则相接把对应的记录项返回给本地名称服务器，然后再由本地名称服务器返回给DNS客户端，否则向本地名称服务器返回所请求的DNS域名中的二级域名所对应的二级名称服务器地址。

然后本地名称服务器继续按照前面介绍的方法一次次地向三级、四级名称服务器查询，直到最终的对应域名所在区域的**权威名称服务器**返回到最终的记录给本地名称服务器。然后再由本地名称服务器返回给DNS客户，同时本地名称服务器会缓存本次查询得到的记录项。













# DNS安全



## **什么是 DNSSEC？**



与许多 Internet 协议一样，在设计 DNS 系统时并未考虑安全性，并且该系统存在一些设计限制。

再加上技术进步，这些限制使攻击者很容易出于恶意劫持 DNS 查找，例如将用户发送到可分发恶意软件或收集个人信息的欺诈性网站。

DNS 安全扩展 (DNSSEC) 是为缓解此问题而创建的安全协议。DNSSEC 通过对数据进行数字签名来防止攻击，以帮助确保其有效性。为确保进行安全查找，此签名必须在 DNS 查找过程的每个级别进行。



此签名过程类似于人们用笔签署法律文件；此人签署别人无法创建的唯一签名，并且法院专家能够查看该签名并验证文件是否由该人签署的。这些数字签名可确保数据未被篡改。



DNSSEC 在 DNS 的所有层中实施分层数字签名策略。例如，在 `google.com` 查找中，根 DNS 服务器将为 `.COM` 域名服务器签写一个密钥，然后 `.COM` 域名服务器将为 `google.com` 的权威性域名服务器签写一个密钥。

尽管更高的安全性始终是首选的，但 DNSSEC 旨在向后兼容，以确保传统 DNS 查找仍可正确解析，尽管这没有提高安全性。作为整体 Internet 安全策略的一部分，DNSSEC 应与其他安全措施配合使用，例如 SSL/TLS。

DNSSEC 创建了一个父子信任链，该链一直行进到根区域。在 DNS 的任何层上此信任链都不能受损，否则请求将受到中间人攻击。

要闭合信任链，需要对根区域本身进行验证（证明没有篡改或欺诈），这实际上是通过人工干预来完成的。有趣的是，在所谓的“根区域签名仪式”上，来自世界各地的某些人聚集在一起，以公开且经审核的方式签署根 DNSKEY RRset。



## **涉及 DNS 的常见攻击有哪些？**



DNSSEC 是一种强大的安全协议，但不幸的是，它当前尚未得到普遍采用。

缺乏普及再加上其他可能的漏洞，最重要的是 DNS 是大多数 Internet 请求不可或缺的一部分，这些使 DNS 成为恶意攻击的主要目标。

攻击者发现了众多针对和利用 DNS 服务器的方法，以下是一些最常见的方法：



- **DNS 欺骗/缓存中毒** ：这是将伪造的 DNS 数据引入 DNS 解析器缓存中的攻击，其将导致解析器返回域的错误 IP 地址。流量可能会被转移到恶意计算机或攻击者想要的其他任何位置，而不是前往正确网站；通常是用于恶意目的的原始站点副本，例如分发恶意软件或收集登录信息。
- **DNS 隧道** ：这种攻击使用其他协议通过 DNS 查询和响应建立隧道。攻击者可以使用 SSH、TCP 或 HTTP 在大多数防火墙未察觉的情况下将恶意软件或被盗信息传递到 DNS 查询中。
- **DNS 劫持** ：在 DNS 劫持中，攻击者将查询重定向到其他域名服务器。这可通过恶意软件或未经授权的 DNS 服务器修改来实现。尽管其结果与 DNS 欺骗的结果相似，但这是一种截然不同的攻击，因为其目标是域名服务器上网站的 DNS 记录，而不是解析器的高速缓存
- **NXDOMAIN 攻击** ：这是一种 DNS 洪水攻击，攻击者利用请求淹没 DNS 服务器，从而请求不存在的记录，以试图导致合法流量的拒绝服务。这可使用复杂的攻击工具来实现，这些工具可为每个请求自动生成唯一子域。NXDOMAIN 攻击还可将递归解析器作为目标，目标是用垃圾请求填充解析器的高速缓存。
- **随机子域攻击** ：在这种情况下，攻击者向一个合法站点的几个随机的不存在的子域发送 DNS 查询。其目标是为该域的权威性域名服务器创建拒绝服务，从而使其无法从域名服务器查找网站。其副作用是，为攻击者提供服务的 ISP 也可能会受到影响，因为其递归解析器的高速缓存将被加载错误请求。
- **域锁定攻击** ：不良行为者会通过设置特殊域和解析器来与其他合法解析器建立 TCP 连接，从而策划这种攻击形式。当目标解析器发送请求时，这些域会发回缓慢的随机数据包流，从而占用解析器的资源。
- **基于僵尸网络的 CPE 攻击** ：这些攻击是使用 CPE 设备（用户终端设备，这是服务提供商提供的供客户使用的硬件，例如调制解调器、路由器、机顶盒等）进行的。攻击者使 CPE 受损，这些设备成为僵尸网络的一部分，用于对一个站点或域进行随机子域攻击。



# DoH与DoT





DoT 全称是 DNS over TLS，它使用 TLS 协议来传输 DNS 协议。TLS 协议是目前互联网最常用的安全加密协议之一，我们访问 HTTPS 的安全基础就是基于 TLS 协议的。相比于之前使用无连接无加密的 UDP 模式， TLS 本身已经实现了保密性与完整性。

DoH全称是DNS over HTTPS，它使用 HTTPS 来传输 DNS 协议。DoH 的安全原理与 DoT 一样，他们之间的区别只在于：DoH有了 HTTP 格式封装，更加通用。

DoT在专用端口上通过 TLS 连接 DNS 服务器，而 DoH 是基于使用 HTTP 应用程序层协议，将查询发送到 HTTPS 端口上的特定 HTTP 端点,这里造成的外界感知就是端口号的不同，DoT 的端口号是 853，DoH 端口号 443。









阿里云公共DNS安全传输服务介绍（DoH/DoT）

https://www.alidns.com/articles/6018321800a44d0e45e90d71



目前已经DoT/DoH方案已经正式开放公测：为DNSPod用户的信息和隐私安全保驾护航。

- DoH 地址：https://doh.pub/dns-query
- DoT 地址：dot.pub









# DNS 缓存

有人的地方，就有江湖，有DNS的地方，就有缓存。浏览器、操作系统、Local DNS、根域名服务器，它们都会对DNS结果做一定程度的缓存。

- 第一步：浏览器将会检查缓存中有没有这个域名对应的解析过的IP地址，如果有该解析过程将会结束。浏览器缓存域名也是有限制的，包括是否缓存，缓存的时间、大小，可以通过TTL属性来设置。
  - Chrome：为了加快访问速度，Google Chrome浏览器采用了预提DNS记录，在本地建立DNS缓存的方法，加快网站的连接速度。在Chrome地址栏中输入chrome://net-internals/#dns 就可以看各域名的DNS 缓存时间。默认，Chrome对每个域名会默认缓存60s。
  - Firefox：Firefox也有dns缓存功能，但是默认缓存时间只有1分钟，可以通过修改该默认值加快DNS解析速度，方法如下：打开一个新的窗口，地址栏输 入 about:config，回车，进入设置界面。然后搜索 network.dnsCacheExpiration，把原来的60改成 6000（表示缓存6000秒），再搜索network.dnsCacheEntries 把默认的20改成1000（表示缓存1000条）。如果没 有上面两个项目，新建它们即可，新建条目类型为整数型。 当然也可以按照需要设置成其它的值。但是dns缓存太久了也会出问题，比如有的网站ip换了，就无法访问了。针对这样的问题，还可以安装一个 firefox 插件来开启或者 关闭dns cache功能，https://addons.mozilla.org/zh-CN/firefox/addon/5914。
- 第二步：如果用户的浏览器中缓存中没有，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。
- 第三步：如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。
- 第四步：如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/ip参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器（LocalDNS），此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，**此解析具有权威性。**
- 第五步：如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，**此解析不具有权威性。**
- 第六步：如果**本地DNS服务器本地区域文件**与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找域名域服务器，重复上面的动作，进行查询，直至找到域名对应的主机。



https://www.cnblogs.com/aspirant/p/10832712.html

# DNS TTL 值理解及配置



我们有配置域名时，不同情况下，不同业务下，需要增大或减小 DNS TTL 值。这是为什么呢？ 这需要我们重新理解下 DNS TTL 值的含义。



TTL(Time-To-Live)，就是一条域名解析记录在 DNS 服务器中的存留时间。

当各地的 DNS 服务器接受到解析请求时，就会向**域名指定的 NS 服务器**发出解析请求从而获得解析记录；

在获得这个记录之后，记录会在 DNS 服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS 服务器将不再向 NS 服务器发出请求，而是直接返回刚才获得的记录；

而这个记录在 DNS 服务器上保留的时间，就是 TTL 值。





https://jaminzhang.github.io/dns/DNS-TTL-Understanding-and-Config/

