# VIM缓冲区



Vim 是一个文本编辑器。每次文本都是作为缓冲区的一部分显示的。每一份文件都是在他们自己独有的缓冲区打开的，插件显示的内容也在它们自己的缓冲区中。



**缓冲区** 可以看做是内存中的文本文件，在没写到磁盘上时，所有的修改都发生在内存中；



用类似` vim .zshrc`  的命令启动 Vim 。这个文件的内容将会被加载到缓冲区中，你现在有一个已载入的缓冲区。如果你在 Vim 中保存这个文件，缓冲区内容将会被同步到磁盘上（写回文件中）。

由于这个缓冲区也在一个窗口上显示，所以它也是一个**已激活的缓冲区**。如果你现在通过 `:e .vimrc` 命令加载另一个文件，.zshrc 将会变成一个隐藏的缓冲区，并且 .vimrc 变成 **已激活缓冲区**。



vim  .zshrc  .vimrc  也可以打开多个文件，第一个 .zshrc 文件将会成为**已激活缓冲区**，显然，当一个VIM进程打开多个文件时，就会存在缓冲区列表。

> 当你使用 :q 关闭文件时，是否看到过 1 more file to edit 的警告？那就是缓冲区中的文件。
>
> 每一个通过 shell 命令传递给 Vim 的文件名都被记录在一个参数列表中。



```shell

################ 缓冲区默认操作键

:ls             列出所有缓冲区

## 缓冲区跳转 
:bn[ext]     	激活下一个缓冲区，在激活之前要确认是否保存当前缓冲区
:bp[previous]  	激活上一个缓冲区



:bn[ext]!   	放弃当前修改进入下一个缓冲区
:wnext       	保存当前修改进入下一个缓冲区
:bp[previous]  	激活上一个缓冲区
:bp[previous]!  放弃当前修改进入上一个缓冲区
:wp[previous]!  放弃当前修改进入上一个缓冲区

:b接受缓冲区编号，或者部分文件名。
:b2 将会跳转到编号为2的缓冲区，
    如果你正在用:ls列出缓冲区，这时只需要输入编号回车即可
:b exa 将会跳转到最匹配exa的文件名，
    比如example.html，模糊匹配打开文件正是Vim缓冲区的强大之处    

:previous  
```





