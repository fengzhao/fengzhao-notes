



## 传统本地事务

事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。

也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。

事务应该具有 4 个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为 ACID 特性。



传统单机应用使用一个RDBMS作为数据源。

应用开启事务，进行CRUD，提交或回滚事务，统统发生在本地事务中，由资源管理器（RM）直接提供事务支持。数据的一致性在一个本地事务中得到保证。



![img](分布式事务.assets/20201109184306.png)







## 分布式事务



**分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。**



例如在大型电商系统中，下单接口通常会扣减库存、减去优惠、生成订单 id, 而订单服务与库存、优惠、订单 id 都是不同的服务，下单接口的成功与否，不仅取决于本地的 db 操作，而且依赖第三方系统的结果，这时候分布式事务就保证这些操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。



显然随着服务的逐步拆分，各个服务均有自己的数据库，这个时候本地事务已经无法满足数据一致性的要求。

由于多个数据源的同时访问，事务需要跨多个数据源管理。



XA 是由X/Open组织提出的分布式事务的规范。 

XA规范主要定义了 **(全局)事务管理器(TM)和(局部)资源管理器(RM) 之间的接口。主流的关系型 数据库产品都是实现了XA接口的**。

- 事务管理器（transaction manager）：事务管理器是分布式事务的核心管理者。事务管理器与每个资源管理器（resource manager）进行通信，协调并完成事务的处理。事务的各个分支由唯一命名进行标识

- 资源管理器（resource manager）：用来管理系统资源，是通向事务资源的途径。数据库就是一种资源管理器。资源管理还应该具有管理事务提交或回滚的能力。

  Xid 接口 Xid, Xid 接口是 X/Open 事务标识符 XID 结构的 Java 映射。此接口指定三个访问器方法，以检索全局事务格式 ID、全局事务 ID 和分支限定符。Xid 接口供事务管理器和资源管理器使用。此接口对应用程序不可见。
  XA 不能自动提交。

通俗点说，在 MySQL 分库分表的架构中。**事务管理器就相当于数据库中间件：mycat，shardingsphere**

**资源管理器就相当于多个不同机器上的数据库节点。**



![](分布式事务.assets/20201109185605.png)







### 两阶段提交



在XA协议中的事务提交分为两阶段:

- 第一阶段（prepare）：事务管理器要求每个涉及到事务的数据库预提交 (precommit) 此操作，并反映是否可以提交。
  - 即所有的参与者准备执行事务并锁住需要的资源。参与者ready时，向transaction manager报告已准备就绪。

- 第二阶段（commit/rollback）：事务协调器要求每个数据库提交数据，或者回滚数据。
  - 当transaction manager确认所有参与者都ready后，向所有参与者发送commit命令。



优点： 尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持XA事务。



### 两阶段提交的问题



> 情况一：事务管理器挂了，资源管理器没挂（mycat 挂了，数据库都还在）
>
> 这种情况其实比较好解决，只要找一个协调者的替代者。当他成为新的协调者的时候，询问所有参与者的最后那条事务的执行情况，他就可以知道是应该做什么样的操作了。所以，这种情况不会导致数据不一致。  保证mycat高可用 
>
> 
>
> 情况二：资源管理器挂了，事务管理器没挂（数据库挂了，mycat还在）





















## 强一致性、弱一致性、最终一致性



### 强一致性

任何一次读都能读到某个数据的最近一次写的数据。

系统中的所有进程，看到的操作顺序，都和全局时钟下的顺序一致。简言之，在任意时刻，所有节点中的数据是一样的。



### 弱一致性

数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。



### 最终一致性

不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。

简单说，就是在一段时间后，节点间的数据会最终达到一致状态。

比如通过消息队列或者管道，





## CAP 原则



CAP 原则又称 CAP 定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。



#### 一致性（C）：

在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）



#### 可用性（A）：

在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）



#### 分区容错性（P）

以实际效果而言，分区相当于对通信的时限要求。

系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。



CAP 原则的精髓就是要么 AP，要么 CP，要么 AC，但是不存在 CAP。

如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况。此时 C 和 P 两要素具备。

但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问。

此时可用性条件就不能被满足，即在此情况下获得了 CP 系统，但是 CAP 不可同时满足。





### BASE 理论

